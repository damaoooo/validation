import os
import subprocess
from concurrent.futures import ProcessPoolExecutor, as_completed
from typing import List, Tuple, Optional

import typer
from rich.progress import Progress

import json
from pathlib import Path
from rich.table import Table
from rich.console import Console


class VulnerabilityScanner:
    def __init__(self, name: str, binary_path: str):
        self.name = name
        self.binary_path = binary_path
        
    def run(self, input_path: str, output_path: str):
        raise NotImplementedError("Subclasses should implement this method")
    
    
class GrypeVulnScanner(VulnerabilityScanner):
    def __init__(self, binary_path: str = "grype"):
        super().__init__("Grype", binary_path)
        
    def run(self, input_path: str, output_path: str):
        # grype supports reading SBOM via sbom:<path> and writing json directly to file
        cmd = [self.binary_path, f"sbom:{input_path}", "-o", f"json={output_path}"]
        subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stdin=subprocess.DEVNULL, stderr=subprocess.PIPE, text=True)
            
class TrivyVulnScanner(VulnerabilityScanner):
    def __init__(self, binary_path: str = "trivy"):
        super().__init__("Trivy", binary_path)
        
    def run(self, input_path: str, output_path: str):
        cmd = [self.binary_path, "sbom", input_path, "--format", "json", "-o", output_path]
        subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stdin=subprocess.DEVNULL, stderr=subprocess.PIPE, text=True)
        
# Simple registry to keep things compact
SCANNERS = {
    "grype": GrypeVulnScanner,
    "trivy": TrivyVulnScanner,
}


def _run_one(scanner_key: str, input_file: str, output_dir: str) -> Tuple[str, str, bool, str]:
    scanner_cls = SCANNERS[scanner_key]
    scanner: VulnerabilityScanner = scanner_cls()
    base = os.path.basename(input_file)
    out_file = os.path.join(output_dir, f"{base}_{scanner.name}_vuln.json")
    try:
        scanner.run(input_file, out_file)
        return (input_file, scanner.name, True, "")
    except Exception as e:  # keep robust in parallel mode
        return (input_file, scanner.name, False, str(e))


app = typer.Typer(add_completion=False)


@app.command()
def scan(
    input_dir: str = typer.Option("/sbom", "--input-dir", "-i", help="Directory containing SBOM files"),
    output_dir: str = typer.Option("/vuln_reports", "--output-dir", "-o", help="Directory to write reports"),
    scanner: List[str] = typer.Option(["grype", "trivy"], "--scanner", "-s", help="Scanners to use", show_default=True),
    workers: Optional[int] = typer.Option(None, "--workers", "-w", help="Number of processes (default: CPU count)"),
):
    os.makedirs(output_dir, exist_ok=True)

    # collect input files
    files: List[str] = []
    for root, _, fnames in os.walk(input_dir):
        for f in fnames:
            if len(scanner) > 1:
                files.append(os.path.join(root, f))
            else:
                if scanner[0].lower() == "grype" and f.startswith("syft"):
                    files.append(os.path.join(root, f))
                elif scanner[0].lower() == "trivy" and f.startswith("trivy"):
                    files.append(os.path.join(root, f))
                else:
                    continue

    selected = [s.lower() for s in scanner if s.lower() in SCANNERS]
    tasks = [(s, f, output_dir) for s in selected for f in files]

    if not tasks:
        typer.echo("No tasks to run (check input-dir or scanner selection).")
        raise typer.Exit(code=1)

    total = len(tasks)
    ok = 0
    with Progress() as progress:
        t = progress.add_task("Scanning", total=total)
        with ProcessPoolExecutor(max_workers=workers or os.cpu_count()) as ex:
            futures = [ex.submit(_run_one, *tup) for tup in tasks]
            for fut in as_completed(futures):
                _, _, success, _ = fut.result()
                ok += 1 if success else 0
                progress.update(t, advance=1)

    typer.echo(f"Done: {ok}/{total} succeeded. Reports -> {output_dir}")
    # display_result(output_dir)


@app.command()
def show(
    result_dir: str,
    scanner: Optional[str] = typer.Option(None, "--scanner", "-s", help="Filter by specific scanner (grype/trivy)")
):
    """Display vulnerability scan results in a formatted table."""
    if not os.path.exists(result_dir):
        typer.echo(f"Error: Result directory '{result_dir}' does not exist.", err=True)
        raise typer.Exit(code=1)
    
    display_result(result_dir, scanner)


def display_result(result_dir: str, scanner: Optional[str] = None):

    console = Console()
    table = Table(title="Vulnerability Scan Summary")
    table.add_column("SBOM File", style="cyan", no_wrap=True)
    table.add_column("Scanner", style="magenta")
    table.add_column("Vulnerabilities Found", justify="right", style="green")
    total_vulns = 0
    per_repo: dict[str, int] = {}

    result_path = Path(result_dir)
    for report_name in os.listdir(result_path):
        report = os.path.join(result_path, report_name)
        try:
            if 'dtool' in report_name:
                print("skip dtool report")
                # continue
            with open(report) as f:
                data = json.load(f)

            # Extract original sbom file path (without scanner suffix and vuln tag)
            parts = report.split("_")
            sbom_file = "_".join(parts[:-2])
            scanner_name = parts[-2]
            
            if scanner and scanner_name.lower() != scanner.lower():
                continue

            if scanner_name == "Grype":
                vuln_count = len(data.get("matches", []))
                if vuln_count == 0:
                    continue
            else:
                # It must be trivy
                if "Results" not in data or not data['Results']:
                    continue
                vuln_count = len(data['Results'][0].get("Vulnerabilities", []))
                if vuln_count == 0:
                    continue
                
                
            table.add_row(str(report), scanner_name, str(vuln_count))
            total_vulns += vuln_count
            per_repo.setdefault(sbom_file, 0)
            per_repo[sbom_file] += vuln_count
        except Exception as e:
            console.print(f"[red]Failed to read {report}: {e}[/red]")

    repo_count = len(per_repo)
    avg = (total_vulns / repo_count) if repo_count else 0
    # Add a blank separator row then summary
    if repo_count:
        table.add_row("-", "-", "-")
        table.add_row("TOTAL (repos)", str(repo_count), str(total_vulns))
        table.add_row("AVERAGE / repo", "-", f"{avg:.2f}")

    console.print(table)

if __name__ == "__main__":
    app()
    # display_result("/home/damaoooo/sbom/rust/vuln", "Trivy")